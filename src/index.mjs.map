{"version":3,"sources":["transformers/index.ts","transformers/attribute/index.ts","transformers/attribute/date.transformer.ts","transformers/attribute/email.transformer.ts","transformers/attribute/json.transformer.ts","transformers/attribute/obj.transformer.ts","transformers/attribute/phone.transformer.ts","utils/format.ts","utils/mask.ts","transformers/column/index.ts","transformers/column/cryptographer.transformer.ts","utils/aes.ts","transformers/column/json.transformer.ts","transformers/column/number.transformer.ts","transformers/column/decimal.transformer.ts","transformers/column/large-json.transformer.ts","transformers/column/large-string.transformer.ts","typeorm/index.ts","typeorm/datasource/index.ts","interceptors/index.ts","interceptors/serialize.interceptor.ts","validators/index.ts","validators/is-cnpj.validator.ts","validators/is-cpf.validator.ts","validators/is-conversu-email.validator.ts","validators/is-determinated-string.validator.ts","utils/index.ts","../node_modules/uuid/dist/esm-node/rng.js","../node_modules/uuid/dist/esm-node/stringify.js","../node_modules/uuid/dist/esm-node/native.js","../node_modules/uuid/dist/esm-node/v4.js","utils/functions.ts","utils/json.ts","utils/normalize.ts"],"sourcesContent":["import *  as Attribute from './attribute/index';\r\nimport * as Column from './column/index';\r\n\r\n\r\nexport {\r\n    Column,\r\n    Attribute\r\n}","export * from './date.transformer';\nexport * from './email.transformer';\nexport * from './json.transformer';\nexport * from './obj.transformer';\nexport * from './phone.transformer';\n","import { Transform, TransformFnParams } from 'class-transformer';\nimport { format } from 'date-fns';\n\nexport function TransformDate(pattern: string) {\n    return Transform(({ value }: TransformFnParams) => {\n        if (typeof value === 'number' || typeof value === 'object') {\n            return format(value as number | Date, pattern);\n        }\n\n        return value;\n    });\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { Transform, TransformFnParams } from 'class-transformer';\n\nexport function TransformEmail(_type: 'MASK') {\n    return Transform(({ value }: TransformFnParams) => {\n        const [username, domain] = value.split('@');\n\n        const cut = Math.floor(username.length / 4);\n\n        let email = value.slice(0, cut);\n        email += '*'.repeat(cut * 2);\n        email += username.slice(-cut);\n        email += `@${domain}`;\n\n        return email;\n    });\n}\n","import { Transform, TransformFnParams } from 'class-transformer';\n\nexport interface ClassConstructor {\n    new (...args: any[]): any;\n}\n\nexport function TransformJson(serialize?: ClassConstructor | null, property?: string | null) {\n    return Transform(({ value }: TransformFnParams) => {\n        if (typeof value === 'string') {\n            let result = JSON.parse(value);\n\n            if (property) {\n                result = result[property];\n            }\n\n            if (serialize) {\n                return new serialize(result);\n            }\n\n            return result;\n        }\n\n        return value;\n    });\n}\n","import { Transform, TransformFnParams } from 'class-transformer';\n\nexport function TransformObject<T>(keys: string[]) {\n    return Transform(({ value }: TransformFnParams) => {\n        const newObj = {};\n        for (const key of keys) {\n            Object.assign(newObj, {\n                key: value[key as keyof T],\n            });\n        }\n\n        return newObj;\n    });\n}\n","import { Transform, TransformFnParams } from 'class-transformer';\nimport { maskPhone } from '../../utils/mask';\nimport { formatPhone } from '../../utils/format';\n\n\nexport function TransformPhone(type: 'FORMAT' | 'MASK') {\n    return Transform(({ value }: TransformFnParams) => {\n        if (!value) {\n            return null;\n        }\n\n        if (type === 'MASK') {\n            return maskPhone(value);\n        }\n\n        return formatPhone(value);\n    });\n}\n","export function formatCnpj(value: string) {\n    if (!!value && value.length === 14) {\n        return `${value.slice(0, 2)}.${value.slice(2, 5)}.${value.slice(5, 8)}/${value.slice(8, 12)}-${value.slice(value.length - 2, value.length)}`;\n    }\n\n    return value;\n}\n\nexport function formatCpf(value: string) {\n    if (!!value && value.length === 11) {\n        return `${value.slice(0, 3)}.${value.slice(3, 6)}.${value.slice(6, 9)}-${value.slice(value.length - 2, value.length)}`;\n    }\n\n    return value;\n}\n\nexport function formatCep(value: string) {\n    if (!!value && value.length === 8) {\n        return `${value.slice(0, 5)}-${value.slice(value.length - 3, value.length)}`;\n    }\n\n    return value;\n}\n\nexport function formatPlate(value: string) {\n    if (value) {\n        return `${value.substring(0, 3)}-${value.substring(3, value.length)}`;\n    }\n    return value;\n}\n\nexport function formatPhone(value: string) {\n    if (!!value && value.length === 13) {\n        return `+${value.substring(0, 2)} (${value.substring(2, 4)}) ${value.substring(4, 9)}-${value.substring(9, value.length)}`;\n    }\n    return value;\n}\n","import { formatPhone } from \"./format\";\n\n\n\nexport function maskPhone(value: string) {\n    if (value) {\n        let phone = formatPhone(value);\n        phone = phone.includes('-')\n            ? phone\n            : `${phone.slice(0, phone.length - 4)}-${phone.slice(phone.length - 4, phone.length)}`;\n        const [part1, part2] = phone.split('-');\n        let result = part1.slice(0, 12);\n        result += '**-**';\n        result += part2.slice(2, 4);\n\n        return result;\n    }\n\n    return value;\n}\n\nexport function maskCpf(value: string) {\n    if (!!value && value.length === 11) {\n        return `${value.slice(0, 3)}.***.***-${value.slice(value.length - 2, value.length)}`;\n    }\n\n    return value;\n}\n\nexport function maskCnpj(value: string) {\n    if (!!value && value.length === 14) {\n        return `${value.slice(0, 2)}.***.**${value.slice(7, 8)}/${value.slice(8, 12)}-${value.slice(value.length - 2, value.length)}`;\n    }\n\n    return value;\n}\n\nexport function maskCep(value: string) {\n    if (!!value && value.length === 8) {\n        return `${value.slice(0, 2)}***-${value.slice(value.length - 3, value.length)}`;\n    }\n\n    return value;\n}\n","export * from './cryptographer.transformer';\nexport * from './json.transformer';\nexport * from './number.transformer';\nexport * from './decimal.transformer';\nexport * from './large-json.transformer';\nexport * from './large-string.transformer';\n","import { decrypt } from \"dotenv\";\nimport { encrypt } from \"../../utils/aes\";\n\n\n\nexport class CryptographerTransformer {\n\n    private secret: string;\n\n    constructor(secret: string) {\n        this.secret = secret;\n    }\n\n    public to(data: string | null): string | null {\n        return encrypt(this.secret, data);\n    }\n\n    public from(data: string | null): string | null {\n        return decrypt(this.secret, data);\n    }\n}\n\n","import CryptoJS from 'crypto-js';\n\nexport function encrypt(secret: string, value: string | null): string | null {\n    if (value) {\n        return CryptoJS.AES.encrypt(value, secret).toString();\n    }\n\n    return null;\n}\n\nexport function decrypt(secret: string, value: string | null) {\n    if (value) {\n        return CryptoJS.AES.decrypt(value, secret).toString(CryptoJS.enc.Utf8);\n    }\n    return null;\n}\n\nexport function encode(value: string): string {\n    return String(Buffer.from(value).toString('base64') as string);\n}\n\nexport function decode(value: string) {\n    return Buffer.from(value, 'base64').toString('utf-8');\n}\n\n","import CryptoJS from 'crypto-js';\n\nexport class JsonTransformer {\n    private encrypt: boolean;\n    private secret: string;\n\n    constructor(secret: string, encrypt: boolean) {\n        this.secret = secret;\n        this.encrypt = encrypt;\n    }\n\n    public to(data: Object | string): string {\n        try {\n            let result = 'transformation_error';\n            if (typeof data === 'string') {\n                result = data;\n            } else {\n                result = JSON.stringify(data);\n            }\n\n            if (this.encrypt) {\n                result = CryptoJS.AES.encrypt(result, this.secret).toString();\n            }\n\n            return result;\n        } catch (err) {\n            return 'transformation_error';\n        }\n    }\n\n    public from<T>(data: string): T | null | string {\n        if (data === 'transformation_error') {\n            return null;\n        }\n\n        try {\n            if (this.encrypt) {\n                return JSON.parse(CryptoJS.AES.decrypt(data, this.secret).toString(CryptoJS.enc.Utf8)) as T;\n            }\n            return JSON.parse(data) as T;\n        } catch (err) {\n            return data;\n        }\n    }\n}\n","export class NumberTransformer {\n    public to(data: number): number {\n        return data;\n    }\n\n    public from(data: string): number {\n        // output value, you can use Number, parseFloat variations\n        // also you can add nullable condition:\n        // if (!Boolean(data)) return 0;\n\n        return parseInt(data);\n    }\n}\n","export class DecimalTransformer {\n\tpublic to(data: number | null): number | null {\n\t\treturn data;\n\t}\n\n\tpublic from(data: string | null): number | null {\n\t\t// output value, you can use Number, parseFloat variations\n\t\t// also you can add nullable condition:\n\t\t// if (!Boolean(data)) return 0;\n\n\t\tif (!data) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn Number(String(data));\n\t}\n}\n","import CryptoJS from 'crypto-js';\n\n\nexport class LargeJsonTransformer<T> {\n\n    private encrypt: boolean;\n    private secret: string;\n\n    constructor(secret: string, encrypt: boolean) {\n        this.encrypt = encrypt;\n        this.secret = secret;\n    }\n\n    public to(data: Object | string): Buffer {\n        try {\n            let result = 'transformation_error';\n            if (typeof data === 'string') {\n                result = data;\n            } else {\n                result = JSON.stringify(data);\n            }\n\n            if (this.encrypt) {\n                result = CryptoJS.AES.encrypt(result, this.secret).toString();\n            }\n\n            return Buffer.from(result, 'utf-8');\n        } catch (err) {\n            return Buffer.from('transformation_error');\n        }\n    }\n\n    public from<T>(data: Buffer): T | null | string {\n\n        const content = data.toString('utf-8');\n\n        if (content === 'transformation_error') {\n            return null;\n        }\n\n        try {\n            let result = content;\n            if (this.encrypt) {\n\n                result = CryptoJS.AES.decrypt(content, this.secret).toString(CryptoJS.enc.Utf8) as string;\n\n            }\n\n            return result ? (JSON.parse(result) as T) : null;\n        } catch (err) {\n\n            return content;\n        }\n    }\n}\n\n","\nimport CryptoJS from 'crypto-js';\n\n\nexport class LargeStringTransformer {\n\n    private encrypt: boolean;\n    private secret: string;\n\n    constructor(secret: string, encrypt: boolean) {\n        this.secret = secret;\n        this.encrypt = encrypt;\n    }\n\n    public to(data: string | null): Buffer | null {\n        if (!data) {\n            return null;\n        }\n\n        try {\n            let result = data;\n\n            if (this.encrypt) {\n                result = CryptoJS.AES.encrypt(result, this.secret).toString();\n            }\n\n            return Buffer.from(result, 'utf-8');\n        } catch (err) {\n            return null;\n        }\n    }\n\n    public from(data: Buffer | null): string | null {\n        if (!data) {\n            return null;\n        }\n\n        let result = data.toString('utf-8');\n        try {\n            if (this.encrypt) {\n                result = CryptoJS.AES.decrypt(result, this.secret).toString(CryptoJS.enc.Utf8) as string;\n            }\n            return result;\n        } catch (err) {\n            return null;\n        }\n    }\n}\n\n","export * from './datasource/index';","/* eslint-disable @typescript-eslint/no-var-requires */\nimport { DataSource, DataSourceOptions } from 'typeorm';\n\n\nexport const getDataSource: (options: DataSourceOptions) => DataSource = (options: DataSourceOptions) => {\n\n    const dataSource = new DataSource(options);\n    dataSource.initialize();\n    return dataSource\n};\n","export * from './serialize.interceptor'","import { NestInterceptor, ExecutionContext, CallHandler, UseInterceptors } from '@nestjs/common';\nimport { plainToInstance } from 'class-transformer';\nimport { Observable, map } from 'rxjs';\n\ninterface ClassConstructor {\n    new (...args: any[]): any;\n}\n\nexport function Serialize(dto: ClassConstructor) {\n    return UseInterceptors(new SerializeInterceptor(dto));\n}\n\nexport class SerializeInterceptor implements NestInterceptor {\n    // dto is the variable. so you can use this class for different entities\n    constructor(private dto: any) {}\n    intercept(context: ExecutionContext, handler: CallHandler): Observable<any> {\n        // you can write some code to run before request is handled\n        return handler.handle().pipe(\n            // data is the incoming user entity\n            map((data: any) => {\n                return plainToInstance(this.dto, data, {\n                    //   this takes care of everything. this will expose things that are set in the UserDto\n                    excludeExtraneousValues: true,\n                    enableImplicitConversion: true,\n                });\n            }),\n        );\n    }\n}\n","export * from './is-cnpj.validator';\r\nexport * from './is-cpf.validator';\r\nexport * from './is-conversu-email.validator';\r\nexport * from './is-determinated-string.validator';","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { registerDecorator, ValidationOptions, ValidationArguments } from 'class-validator';\nimport { cnpj as cnpjValidator } from 'cpf-cnpj-validator';\n\nexport function IsCnpj(validationOptions?: ValidationOptions) {\n    return function (object: any, propertyName: string) {\n        registerDecorator({\n            name: 'IsCnpj',\n            target: object.constructor,\n            propertyName,\n            options: validationOptions,\n            validator: {\n                validate(value: string, _args: ValidationArguments) {\n                    return cnpjValidator.isValid(value);\n                },\n                defaultMessage(_args: ValidationArguments) {\n                    return `Invalid CNPJ. Must have 14 numeric characters.`;\n                },\n            },\n        });\n    };\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { registerDecorator, ValidationOptions, ValidationArguments } from 'class-validator';\nimport { cpf as cpfValidator } from 'cpf-cnpj-validator';\n\nexport function IsCpf(validationOptions?: ValidationOptions) {\n    return function (object: any, propertyName: string) {\n        registerDecorator({\n            name: 'IsCpf',\n            target: object.constructor,\n            propertyName,\n            options: validationOptions,\n            validator: {\n                validate(value: string, _args: ValidationArguments) {\n                    return cpfValidator.isValid(value);\n                },\n                defaultMessage(_args: ValidationArguments) {\n                    return `Invalid CPF. Must have 11 numeric characters.`;\n                },\n            },\n        });\n    };\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { registerDecorator, ValidationOptions, ValidationArguments, isEmail } from 'class-validator';\n\nexport function IsConversuEmail(validationOptions?: ValidationOptions) {\n    return function (object: any, propertyName: string) {\n        registerDecorator({\n            name: 'IsConversuEmail',\n            target: object.constructor,\n            propertyName,\n            options: validationOptions,\n            validator: {\n                validate(value: string, _args: ValidationArguments) {\n                    return isEmail(value) && value.toLowerCase().endsWith(process.env.CONVERSU_EMAIL_DOMAIN);\n                },\n                defaultMessage(_args: ValidationArguments) {\n                    return `Must be an institutional email.`;\n                },\n            },\n        });\n    };\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { registerDecorator, ValidationOptions, ValidationArguments } from 'class-validator';\n\nexport function IsDeterminedString(allowedValues: string[], validationOptions?: ValidationOptions) {\n    return function (object: any, propertyName: string) {\n        registerDecorator({\n            name: 'IsDeterminedString',\n            target: object.constructor,\n            propertyName,\n            options: validationOptions,\n            validator: {\n                validate(value: any, _args: ValidationArguments) {\n                    if (!allowedValues.includes(value)) {\n                        return false;\n                    }\n                    return true;\n                },\n                defaultMessage(args: ValidationArguments) {\n                    return `${args.property} must be one of: ${allowedValues.join(', ')}`;\n                },\n            },\n        });\n    };\n}\n","export * from './aes';\r\nexport * from './functions';\r\nexport * from './json';\r\nexport * from './normalize';","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { v4 as uuidv4 } from 'uuid';\n\nexport function generateUUID(identifier: string, isSuffix?: boolean) {\n    if (!!isSuffix && isSuffix) {\n        return `${uuidv4()}-${identifier.toLowerCase()}`;\n    }\n\n    return `${identifier.toLowerCase()}-${uuidv4()}`;\n}\n\nexport function escapeRegExp(str: string) {\n    return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nexport function isBase64(str: string): boolean {\n\tconst base64Regex =\n\t\t/^(?:[A-Za-z\\d+/]{4})*(?:[A-Za-z\\d+/]{2}==|[A-Za-z\\d+/]{3}=)?$/;\n\treturn base64Regex.test(str);\n}\n\nexport function estimateContentSize(value?: string | null): number | null {\n\tif (!value) {\n\t\treturn null;\n\t}\n\n\tlet decodedData: Buffer;\n\n\ttry {\n\t\t// Try decoding as Base64\n\t\tdecodedData = Buffer.from(value, 'base64');\n\t} catch (error) {\n\t\t// If decoding fails, assume it's not Base64 and proceed with parsing\n\t\tdecodedData = Buffer.from(value);\n\t}\n\n\t// Get the byte size\n\tconst byteSize: number = decodedData.length;\n\n\treturn byteSize ?? 0;\n}\n\nexport function hasUniqueKeys(obj: object) {\n\tconst keysSet = new Set(Object.keys(obj));\n\treturn keysSet.size === Object.keys(obj).length;\n}\n\nexport function hasDuplicates(arr: string[]) {\n\tconst valueSet = new Set(arr);\n\treturn valueSet.size !== arr.length;\n}\n\nexport function findDuplicates(arr: string[]) {\n\tconst seen = new Set();\n\tconst duplicates = new Set();\n\n\tfor (const value of arr) {\n\t\tif (seen.has(value)) {\n\t\t\tduplicates.add(value);\n\t\t} else {\n\t\t\tseen.add(value);\n\t\t}\n\t}\n\n\treturn Array.from(duplicates);\n}\n\nexport function extractTypeValues<T extends string>(type: any): T[] {\n\tif (type && type.name === 'String') {\n\t\treturn Object.values(type);\n\t}\n\tthrow new Error(`Invalid type provided: ${type}`);\n}\n\n\nexport function getMimeType(value: string) {\n\tif (value.includes('base64')) {\n\t\tconst [type, _base64str] = value.split(';');\n\n\t\treturn type.split(':')[1];\n\t}\n\n\treturn 'text/plain';\n}\n\nexport function getBytes(value: string): Buffer | null {\n\tif (value.includes('base64')) {\n\t\t// data:image/png;base64\n\n\t\tconst [_type, base64str] = value.split(';');\n\n\t\ttry {\n\t\t\treturn Buffer.from(base64str, 'base64');\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn Buffer.from(value, 'utf-8');\n}","function safetyParse<T extends object>(obj?: any | null): T | null {\n\tif (!obj) {\n\t\treturn null;\n\t}\n\n\tif (typeof obj === 'string') {\n\t\ttry {\n\t\t\treturn JSON.parse(obj);\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tif (typeof obj === 'object') {\n\t\treturn obj;\n\t}\n\n\treturn null;\n}\n\nfunction safetyStringify(obj: object | string | null): string | null {\n\tif (!obj) {\n\t\treturn null;\n\t}\n\n\tif (typeof obj === 'string') {\n\t\treturn obj;\n\t}\n\n\tif (typeof obj === 'object') {\n\t\ttry {\n\t\t\treturn JSON.stringify(obj);\n\t\t} catch (err) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nfunction safetyUpdate(\n\tobj: object | string | null,\n\tdata?: object | null,\n): object | string | null {\n\tlet current = obj;\n\n\tif (!data) {\n\t\treturn current;\n\t}\n\n\tif (!obj) {\n\t\tcurrent = {};\n\t}\n\n\tif (typeof obj === 'string') {\n\t\ttry {\n\t\t\tcurrent = JSON.parse(obj);\n\t\t} catch (err) {\n\t\t\treturn obj;\n\t\t}\n\t}\n\n\tcurrent = Object.assign(current, data);\n\n\treturn current;\n}\n\nfunction safetyRemove(obj: object | string | null, key: string) {\n\tlet metadata = safetyParse(obj);\n\tif (!metadata) {\n\t\treturn metadata;\n\t}\n\tObject.keys(metadata).filter(key => key !== 'waitingFor').forEach(key => {\n\t\tmetadata[key] = metadata[key];\n\t})\n\treturn metadata;\n}\n\nexport const SAFETY_JSON = {\n\tparse: safetyParse,\n\tstringify: safetyStringify,\n\tupdate: safetyUpdate,\n\tremove: safetyRemove\n};\n","import { escapeRegExp } from \"./functions\";\n\nexport function normalizeTextNumber(value?: string | null): string | null {\n    if (!value) {\n        return null;\n    }\n\n    const result = value.trim();\n    return result.replace(' ', '').replace(/\\D/g, '');\n}\n\nexport function normalizeText(\n    value: string | null | undefined,\n    params: { toUpperCase: boolean; replaceSpace: boolean; replaceSpecialChars: string[] | null },\n) {\n    let result = value;\n    if (value) {\n        result = result.trim().replace('\\n', '');\n\n        result = result.replace(/\\n/g, '');\n\n        if (params.toUpperCase) {\n            result = result.toUpperCase();\n        }\n\n        if (params.replaceSpace) {\n            result = result.replace(/ /g, '_');\n        }\n\n        if (params.replaceSpecialChars) {\n            for (const char of params.replaceSpecialChars) {\n                if (value.includes(char)) {\n                    const regex = new RegExp(escapeRegExp(char), 'g');\n                    result = result.replace(regex, '');\n                }\n            }\n        }\n    }\n\n    return result;\n}"],"mappings":"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","names":["Transform","Transform","Transform","Transform","Transform","decrypt","decrypt","CryptoJS","encrypt","CryptoJS","encrypt","CryptoJS","encrypt","registerDecorator","registerDecorator","registerDecorator","crypto","key"]}